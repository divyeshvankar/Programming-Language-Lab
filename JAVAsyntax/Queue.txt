import java.util.Arrays;

class ConcurrentCircularQueue {
    private int capacity;
    private int[] queue;
    private int front, rear;
    
    public ConcurrentCircularQueue(int capacity) {
        this.capacity = capacity;
        this.queue = new int[capacity];
        this.front = this.rear = -1;
    }
    
    public synchronized void enqueue(int item) {
        while (isFull()) {
            try {
                wait();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        if (isEmpty())
            front = 0;

        rear = (rear + 1) % capacity;
        queue[rear] = item;

        notifyAll();
    }

    public synchronized int dequeue() {
        while (isEmpty()) {
            try {
                wait();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        int item = queue[front];

        if (front == rear)
            front = rear = -1;
        else
            front = (front + 1) % capacity;

        notifyAll();

        return item;
    }

    public synchronized void sortAndPrint() {
        if (!isEmpty()) {
            Arrays.sort(queue, front, (rear + 1) % capacity);
            System.out.println(Arrays.toString(Arrays.copyOfRange(queue, front, (rear + 1) % capacity)));
        }
    }

    private boolean isFull() {
        return (front == 0 && rear == capacity - 1) || (rear == (front - 1) % capacity);
    }

    private boolean isEmpty() {
        return front == -1;
    }
}

public class Main {
    public static void main(String[] args) {
        int capacity = 5;
        ConcurrentCircularQueue concurrentQueue = new ConcurrentCircularQueue(capacity);
        int numThreads = 3;

        for (int i = 0; i < numThreads; i++) {
            final int threadNum = i;
            new Thread(() -> {
                // Perform some enqueue and dequeue operations
                for (int j = 0; j < 3; j++) {
                    concurrentQueue.enqueue(threadNum * 10 + j);
                    System.out.println("Thread " + threadNum + " enqueued: " + (threadNum * 10 + j));

                    int dequeued = concurrentQueue.dequeue();
                    System.out.println("Thread " + threadNum + " dequeued: " + dequeued);
                }

                // Perform sorting and printing
                concurrentQueue.sortAndPrint();
            }).start();
        }
    }
}      import java.util.Arrays;

class ConcurrentCircularQueue {
    // (Same as before)

    public synchronized void performOperation(String operation, int item) {
        switch (operation.toLowerCase()) {
            case "enqueue":
                enqueue(item);
                System.out.println("Enqueued: " + item);
                break;
            case "dequeue":
                int dequeued = dequeue();
                System.out.println("Dequeued: " + dequeued);
                break;
            case "sort":
                sortAndPrint();
                break;
            default:
                System.out.println("Invalid operation");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        int capacity = 5;
        ConcurrentCircularQueue concurrentQueue = new ConcurrentCircularQueue(capacity);
        int numThreads = 3;

        for (int i = 0; i < numThreads; i++) {
            final int threadNum = i;
            new Thread(() -> {
                // Example: Perform some enqueue, dequeue, and sort operations
                for (int j = 0; j < 3; j++) {
                    concurrentQueue.performOperation("enqueue", threadNum * 10 + j);
                    concurrentQueue.performOperation("dequeue", 0);
                }

                concurrentQueue.performOperation("sort", 0);
            }).start();
        }
    }
}

